import { useEffect, useState } from "react"
import { Card, FormField, Loader } from "../components"

export default function Home() {

    function RenderCard({data, title}) {
        if(data.length > 0) {
            return(
                data.map((post) => {
                    return(
                        <Card key={post._id} {...post} />
                    )
                })
            )
        } else {
            return <p>{title}</p>
        }
    }

    const [posts, setPosts] = useState([])
    const [searchText, setSearchText] = useState("")
    const [searchedPosts, setSearchedPosts] = useState([])
    const URL = import.meta.env.VITE_API_URL
    const [loading, setLoading] = useState(false)

    useEffect(() => {
        const getPosts = async () => {
            try {
                setLoading(true)
                const response = await fetch(`${URL}/posts`, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                const posts = await response.json()
                setPosts(posts)
            } catch (error) {
                console.log(error)
            } finally {
                setLoading(false)
            }
        }

        getPosts()
    }, [])

    function handleSearch(e) {
        setSearchText(e.target.value)
        const searchPosts = posts.filter((post) => {
            return(
                post.name.toLowerCase().includes(searchText.toLowerCase()) || post.prompt.toLowerCase().includes(searchText.toLowerCase())
            )
        })
        setSearchedPosts(searchPosts)
    }

    return(
        <section className="max-w-7xl mx-auto min-h-[calc(100vh-98px)] flex flex-col gap-8 pb-10">
            <div>
                <h1 className="font-bold text-xl sm:text-2xl">The Community Showcase</h1>
                <p className="pt-4 text-gray-400 text-sm sm:text-base">Browser through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
            </div>
            <div>
                <FormField name="search" type="text" labelName="Search" placeholder="Search posts" value={searchText} handleChange={handleSearch} />
            </div>
            { searchText && <p className="text-gray-500">Showing search results for <span className="font-bold">{searchText}</span></p>}
            {loading ? <Loader /> : 
                <div className="flex flex-row flex-wrap gap-4">
                    {searchText ? (
                        <RenderCard data={searchedPosts} title={"No results found"} />
                    ): ( <RenderCard data={posts} title={"No posts found"} /> )}
                </div>
            }
        </section>
    )
}